# day01

Sping
==> MVC 패턴을 기반으로 하는 웹 프로그램 개발을 위해서
	좀 더 다양한 기능을 제공하기 위한 프레임워크의 일종이다.
	
	즉, 우리가 지금까지 직접 만들어서 사용했던
	"디스패치 서블릿" 부터 모든 작업을
	이미 만들어 놓고 이용할 수 있도록 해놓은 하나의 개발툴이다.
	
	전자정부 3.0 에서 지원하는 프레임워크
	
	특징 ]
		1. 요청이 컨트롤러 단위가 아니고 함수단위이다.
			즉, 우리가 JSP 프로젝트에서 하나의 요청이 생기면
			하나의 컨트롤러를 제작해서 요청을 처리했었는데
			스프링에서는 컨트롤러 클래스는 하나만 제작하고
			그 내부의 메소드를 여러개 만들어서 요청 처리하게 된다.
			
			즉, A 요청은 A 함수에서 처리하고
				B 요청은 B 함수에서 처리하고 ...
				
			하나의 클래스 안에 여러개의 함수를 만든다는 것은
			각각의 함수의 공통기능을 따로 함수로 만들어서 
			공통적으로 이용할 수도 있다.
		
		***
		2. Bean 처리를 할 수 있다.
			사용할 클래스를 한곳에 모아서 미리 new 시킬 수 있다.
			
			소스 관리가 매우 간펴해진다.
		
		*****
		3. DI 기법(의존주입)을 이용할 수 있다.
			느슨한 주입 이라고 하며
			빈 처리해서 new 시킨 클래스를 자동으로 사용하는 기법
			
		*****
		4. AOP 기법을 이용할 수 있다.
			번역하면 전처리 클래스 라고 하며
			특정 작업이 실행되는 순간 필요한 작업을 우선 처리하는 기법을 말한다.
			
-----------------------------------------------------------------------------------------------

참고 ]
	Spring Project 만드는 방법
		
		1. ADT 방식
			==> 필요한 라이브러리를 하나씩 다운받아서 직접 적용시켜서 작업하는 방식
			
		2. Maven 방식
			==> 메이븐 서버에 저장된 라이브러리를 자동으로 다운받아서 적용시키는 방법
			
				자동적으로 필요한 라이브러리를 설치하도록 하는 방식이다.
				
				이때 필요한 라이브러리는 pom.xml 에 등록을 하면
				Maven 서버에서 자동으로 서버의 저장소에 접속해서
				해당 라이브러리를 받아서 설치를 하게 된다.
				
				단점 ]
					일단 프로젝트내에 필요한 라이브러리가 없으면 
					메이븐 저장소에 접속해서 라이브러리를 다운받은후 
					프로젝트에 적용시켜준다.
					
					이때 잘못된 라이브러리가 다운로드 되더라도
					메이븐서버는 해당 라이브러리가 존재하면 
					잘못된 파일이라도 그것으로 적용시킨다.
					
					
	폴더 구조 ]
		
		일반적인 프로젝트와 폴더의 사용 방법은 동일하다.
		즉,
		Java Resource 는 자바 소스코드를 작성하는 폴더이고
		src/main/webapp		HTML, JSP, JS, CSS, .. 파일등 웹문서를 작성하는 곳... 
		
		*****
		우리의 경우 뷰는 반드시 컨트롤러에서 포워드 해서 보여줘야 하기 때문에
			src/main/webapp/WEB-INF/views/ ==> 여기에 jsp 파일을 만들어야 한다.
			
---------------------------------------------------------------------------------------

참고 ]
	설정파일 읽는 순서
		
		톰캣의 web.xml	-->		
		프로젝트의 web.xml 	-->  root-context.xml
										--> mybtis-config.xml	--> VO
																--> sql xml
							-->  appServlet/servlet-context.xml
							
---------------------------------------------------------------------------------------

참고 ]
	web.xml에서
			<context-param>
				<param-name>contextConfigLocation</param-name>
				<param-value>/WEB-INF/spring/root-context.xml</param-value>
			</context-param>
			==> web.xml 에서 환경설정을 하는데 있어서 
				내용이 복잡해질것을 대비해서
				보조 환경 설정 파일을 지정하는 부분
				
				없어도 되지만
				우리의 경우 데이터베이스 설정은 root-context.xml 에서 
				전담해서 처리하기로 한다.
			
-----------------------------------------------------------------------------------------
컨트롤러 제작
==> 스프링은 요청에 따라서 컨트롤러를 제작하지 않는다.
	요청에 따라서 메소드를 제작할 뿐이다.
	
	따라서 컨트롤러의 갯수는 몇개가 되어도 상관이 없다.
	
	다만 환경 설정 파일에 등록된 위치를 기본 베이스로 해서 
	그 하위에 만들어주면 된다.
	
	따라서 함수를 제작할 때 이 함수가 어떤 요청이 왔을 때
	실행되어야 하는 함수인지를 지정해줘야 한다.
	
		명령 ]
			@ReqeustMapping
			
		형식 ]
			
			1.	하나의 요청을 처리하는 방법
				
				@RequestMapping("요청내용")
				
				예 ]
					@RequestMapping("/main.blp")
					==> http://localhost/www/main.blp 로 요청하는 내용을 처리
					
					@RequestMapping("/member/login.blp")
					==> http://localhost/www/member/login.blp 로 요청하는 내용을 처리
					
			2. 	여러개의 요청을 한개의 메소드로 처리하는 방법
				
				@RequestMapping({"요청내용1", "요청내용2", ...})
				
				예 ]
					
					@RequestMapping({"/", "/main.blp"})
					==> 	http://localhost/www/
							http://localhost/www/main.blp
							위 두가지 요청을 모두 처리하는 함수
							
			3. 요청 방식에 따라 달라지는 방법
				==> GET 방식이냐? POST 방식이냐 에 따라서 달라지는 경우
				
				@RequestMapping(path="요청내용", method=RequestMethod.POST)
				==> POST 방식으로 요청하는 요청만 처리하는 함수
				
			4. 파라미터 존재 여부에 따라 달라지는 방법
				==> 특정 파라미터가 존재하는 경우에 한해서 처리하는 방법
				
				@RequestMapping(path="요청내용", params="키값")
				@RequestMapping(path="요청내용", params={"키값", "키값2", ..})
				
				예 ]
					@RequestMapping(path="/member/loginProc.blp", params={"id", "pw"})
					==> id, pw 라는 파라미터가 존재할 경우 요청을 처리하는 함수
					
				참고 ]
					키값앞에 ! 를 붙이면 반대의 개념(존재하지 않으면)의 의미가 된다.
					
					
			5. 파라미터의 값이 특정 값인경우에 처리하는 방법
				
				@RequestMapping(path="요청내용", params="키값=데이터")
				
	참고 ]
		와일드 카드를 이용한 요청처리
		==> 여러 요청을 하나의 함수가 실행하도록 하는 방법의 일종으로
			*  문자를 이용해서 처리하는 방법
			
			예 ]
				
				게시판의 경우 요청들의 이름이
					
					boardList.blp
					boardWrite.blp
					boardEdit.blp
				로 요청을 할텐데 이것을 하나의 처리함수로 처리할때는
					
					@RequestMapping("/board/board*")
					==> board 라는 단어로 시작하는 요청은
						뒤에 어떤 단어가 오던지 이함수로 처리하세요.
						
						
	참고 ]
		==>	스프링은 요청처리단위가 컨트롤러 단위가 아니고 함수단위이지만
			프로그램을 제작하다보면
			특정 컨트롤러 안에 있는 함수는 
			공통된 기능을 가지게 될 것이다.
			
			회원관련 요청을 처리할 컨트롤러에는
				
				@RequestMapping("/member/login.blp")
				
				@RequestMapping("/member/logout.blp")
				
				@RequestMapping("/member/join.blp")
					
				@RequestMapping("/member/joinProc.blp")
				
			이렇게 요청을 처리하는 함수가 만들어질 것이고
			이때마다 요청 내용에 시작부분에는 거의 "/member" 로 시작할 것이다.
			
			이렇게 앞에 반복되서 요청내용이 기술되는 경우
			컨트롤러에 반복되는 요청내용중 일부를 요청매핑을 하고
			이후 부분은 각 함수에서 요청매핑을 해줄 수 있다.
			
			@RequestMapping("/member")
			public class Member {
				
				@RequestMapping("/login.blp")	==> /member/login.blp 로 오는 요청을 처리하는 함수
				....
				
				@RequestMapping("/loginProc.blp") ==> /member/loginProc.blp 로는 요청을 처리하는 함수
				....
				
				@RequestMapping("/join.blp")
				....
				
				@RequestMapping("/joinProc.blp")
				....
			}
			
			==> 이때 요청 처리는
					클래스의 매핑된 요청내용 + 함수에 매핑된 요청내용
				을 결합해서 처리하게 된다.
					
-------------------------------------------------------------------------------------

뷰 처리
	MVC Model2 패턴에서는 컨트롤러의 역할이 끝나면 뷰를 호출한다.
	컨트롤러는 자신이 만든 데이터(Model)를 이용해서 화면을 구성할 뷰를 선택해야 한다.
	
	스프링이 뷰를 선택하는 방법
		
		1. 반환값을 void로 해서 뷰를 지정하는 방법
			==> 스프링은 자동적으로
				요청내용을 이용해서 뷰를 지정하게 된다.
				
				예 ]
					@RequestMapping("/member/join.blp")
					public void joinForm(){}
					
					==> 스프링은 요청 내요을 가지고 뷰를 선택하게된다.
						/member/join.jsp 파일을 뷰 파일로 선택하게 된다.
						
		2. 반환값을 String 으로 해서 뷰를 지정하는 방법
			(JSP 프로젝트에서 했던 것과 비슷한 방법)
			
	참고 ]
		위의 1, 2번 방법으로 뷰를 선택하게 되면
		뷰에서 조립할 데이터는
			req.setAttribute()
		를 이용해서 조립하면 된다.
		
		
		3. 반환값을 ModelAndView 클래스로 지정하는 방법
		
			ModelAndView 클래스는 모델과 뷰를 동시에 지정할 수 있는 특징을 가진 클래스
			
			장점 ]
				만들어진 모델과 뷰를 한개의 클래스로 등록해서
				사용할 수 있게된다.
				
	참고 ]
		요청 처리함수의 매개변수의 역할
			
			==> 결론적으로 말해서 규칙이 없고
				다만 컨트롤러 작업에서 필요한 요소가 발생하면
				매개변수에 등록만 해주면 스프링이 알아서 만들어준다.
				
				파라미터로 전달되는 데이터를 매개변수에 키값을 변수이름으로 작성하면
				해당 변수에 파라미터가 전달되어서 들어오게 된다.
				
	참고 ]
		스프링은 파라미터를 VO  클래스를 이용해서 받을 수 있다.
		
		장점 ]
			파라미터가 많은 경우 일반적은 request 로 받으며
			코딩이 길어지고 복잡해진다.
			이 문제를 해결하는 것으로 VO 클래스의 변수에
			받은 파라미터 데이터를 한꺼번에 저장해 주는 것
			
		방법 ]
			1. 파라미터를 받을 수 있는 VO 클래스를 제작
				이때 VO 클래스 안에는
					
					getXXXX()	==> EL에서 사용할 목적으로 만든다.
					setXXXX()	==> 스프링에서 파라미터를 받을 목적으로...
				가 반드시 추가되어야 한다.
				
			2. 요청처리함수의 매개변수에 필요한 VO 클래스를 기술해주면 된다.
				그러면 스프링이 알아서 파라미터를 처리해준다.
				
-------------------------------------------------------------------------------------

	참고 ]
		
		ModelAndView
			주요함수
				
				addObject("키값", 데이터) 	==> req.setAttribute()와 같은 기능의 함수
				setViewName("뷰")			==> 포워딩항 뷰를 셋팅하는 함수
				setView(View)				==> 리다이렉트 할 때 사용되는 함수
					사용형식 ]
						RedirectView rv = new RedirectView();
						rv.setUrl("리다이렉트할 주소");
						
						mv.setView(rv)
					
					
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		