# UML

UML이란?
==> Unified Modeling Language 의 약자로
	표준화된 범용 모델링 언어의 하나이다.
	
	즉, 우리가 만들 프로그램을 도식적(다이어그램 화)으로 표현하여
	좀 더 빨리 전체적인 흐름을 이해할 수 있도록 도와주는 것.
	
	UML의 종류
		
		1. UseCase Diagram
			==> 사용자 입장에서 필요한 기능을 도식적으로 표현한 것.
			
			그리는 방법 ]
				
				1. 액터
					==> 해당 프로그램을 사용하는 사용자를 도식적으로 만드는 것.
						프로그램을 사용하는 사용자의 종류를 
						되도록이면 정확하게 표현해야 한다.
						
						결론적으로
							액터를 보면 만들어야 하는 프로그램의 권한이나
							프로그램의 종류를 분석할 수 있어야 한다.
							
				2. 유즈케이스
					==> 사용할 수 있는 기능을 도식적으로 만든 것.
						되도록이면 자세하게 기능을 풀어서 표현하도록 해야한다.
						
				3. 일반화 작업
					==> 순차적으로 처리하는 것.
						
						예 ]
							게시판 목록보기와 게시판 상세보기는
							목록보기 다음 순서로 상세보기가 된다.
							
				4. include 작업
					==> 특정 작업을 실행할 때 반드시 포함되어야 할 작업을 표시하는 것.
						
						예 ]
							회원 가입의 경우
							반드시 아이디 중복 검사를 거쳐야 하는 경우에
							아이디 중복 검사는 회원 가입에 include 기능으로 만든다.
							
						주의사항 ]
							화살표 방향은 메인에서 보조기능으로 나가는 방향이 되어야 한다.
							
				5. extends 작업
					==> 특정 작업이 진행되는 도중에 다른 작업이 선택적으로 확장 되어짐을 표시하는 것.
						
						주의사항 ]
							방향은 선택요소에서 메인 요소로 나가는 방향이 되어야 한다.
							
		참고 ]
			UseCase 는 도식적으로 사용자가 사용할 수 있는 기능에 대해서 나열한 것이다.
			이것만 가지고는 개발자 입장에서 어떻게 프로그램을 만들어야 하는지
			구체적인 목적을 알 수 없다.
			
			예 ]
				로그인 기능은 언제/ 어떻게 실행해야 하며
				id, 비번은 어떤 정규화 과정을 거쳐야 하는지...
				에 대해서는 구체적으로 알수 는 없다.
				
				따라서 이런 문제점을 보완하기 위해서
				UseCase 명세서를 준비뒀고
				UseCase 다이어 그램은 UseCase 명세서와 함께 작성하는 것이 일반적이다.
				
				
UseCase 명세서 작성방법
==> 이 문서는 하나의 외부 문서로
	어떤 프로그램을 이용해서 작성하던지 상관이 없다.
	(즉, 특정하게 문서의 규칙이 있는 것은 아니다.)
	하지만 다음 내용은 포함되도록 권장하고 있다.
	
	1. UseCase 제목
		==> 현재 UseCase 제목을 의미한다.
			( UseCase 전체가 아닌 하나의 유스케이스)
	2. 개요
		==> UseCase의 전체적인 기능의 설명
		
	3. 관련 액터
		==> 해당 UseCase를 사용하는 사용자 종류(액터 종류)를 의미
	
	4. 기본 흐름
		==> 가장 Default(기본) 적인 작업의 흐름을 명시하는 것을 의미
		
	5. 대체 흐름
		==> 기본 흐름에 문제가 생긴 경우 보조적으로 처리할
			작업의 흐름을 명시하는 것을 의미
			(정상적으로 작업하기 위한 보조 흐름)
			
	6. 예외 흐름
		==> 기본 흐름에 문제가 생긴 경우 보조적으로 처리할 
			작업의 흐름을 명시하는 것을 의미
			(정상적인 작업이 진행되지 못할 경우 처리할 보조 흐름)
			
	7. 확장점
		==> 해당 기능을 수행하지 못할 경우를 대비해서
			대신 처리할 기능을 나열해 주는 것을 의미
			
	8. 특이사항
		==> 특이사항이 필요한 경우 설명하는 부분
	
--------------------------------------------------------------------------------
			
		2. Class Diagram
--------------------------------------------------------------------------------
		3. Sequence Diagram
		==>	프로그램의 처리의 개요나 흐름을 설계할 때 사용하는 다이어그램
		
			구성 요소 ]
				*
				1) 라이프라인
					==> 객체나 클래스를 표시할 때 사용
						작성방법 ]
							객체이름:클래스이름
							
				*
				2) 실행 사양
					==> 라이프라인에서 처리가 실행되고 있는 것을 의미한다.
				3) 정지
					==> 라이프라인 소멸
				*
				4) 동기 메세지
					==> 객체에 대해 처리명령(메세지의 기동명령)을 의미
						메세지 처리가 끝날때까지 다음 메세지를 기동하지 않는 사용을 작성할 때 사용
						
				5) 비동기 메세지
					==> 객체에 대해 처리 명령(메세지의 기동명령)을 의미
						실행한 처리의 완료까지 대기하지 않고 다음 메세지를 기동한다.
						병렬처리등에 사용된다.
						메세지명 뒤에는 괄호를 붙여 인수(파라미터)를 기재한다.
				*
				6) 응답 메세지
					==> 실행한 처리의 리턴 값을 의미한다.
				
--------------------------------------------------------------------------------
		4. Collaboration Diagram
		5. Statechart Diagram
		6. Activity Diagram
		7. Deployment Diagram
		8. Component Diagram
		
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
####
# 수업예제의 회원가입 기능의 UseCase 다이어그램, UseCase 명세서를 작성하세요.
		